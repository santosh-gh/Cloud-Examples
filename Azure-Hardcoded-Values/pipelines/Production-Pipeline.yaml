name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none

pr: none

variables:
  terraformVersion: 0.13.4
  backendServiceArm: 'tamopstf'
  backendAzureRmResourceGroupName: 'tamopstfstates'
  backendAzureRmStorageAccountName: 'tfstatedevops'
  backendAzureRmContainerName: 'azureterraformbuildartifacts'
  backendAzureRmKey: 'terraform.tfstate'

parameters:
- name: enviornment
  displayName: Environment to deploy
  type: string
  default: ../vars/production/production.tfvars
  values:
  - "../vars/production/production.tfvars"
  - "../vars/develop/develop.tfvars"

stages :        
  - stage: terraform_plan
    jobs:
      - job: terraform_plan
        steps:
              - checkout: self

              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: ${{ variables.terraformVersion}}

              - task: TerraformTaskV1@0
                displayName: 'init'
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: ${{ variables.backendServiceArm}}
                  backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName}}
                  backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName}}
                  backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName}}
                  backendAzureRmKey: ${{ variables.backendAzureRmKey}}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

              - task: TerraformTaskV1@0
                displayName: 'plan'
                inputs:
                  provider: 'azurerm'
                  command: 'plan'
                  commandOptions: '-input=false -var-file=${{ parameters.enviornment }}'
                  environmentServiceNameAzureRM: ${{ variables.backendServiceArm}}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
              
              - task: ArchiveFiles@2
                inputs:
                  rootFolderOrFile: '$(Build.SourcesDirectory)'
                  includeRootFolder: false
                  archiveType: 'tar'
                  tarCompression: 'gz'
                  archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
                  replaceExistingArchive: true
                  displayName: 'Create Plan Artifact'

              - task: PublishBuildArtifacts@1
                inputs:
                  PathtoPublish: '$(Build.ArtifactStagingDirectory)'
                  ArtifactName: '$(Build.BuildId)-tfplan'
                  publishLocation: 'Container'
                  displayName: 'Publish Plan Artifact'    

              - task: DeleteFiles@1
                displayName: 'Remove unneeded files'
                inputs:
                  contents: |
                    .terraform
                    tfplan

  - stage: terraform_apply
    dependsOn: [terraform_plan]
    condition: succeeded('terraform_plan')
    jobs:
      - job: terraform_apply
        steps:
              - checkout: none

              - task: DownloadBuildArtifacts@0
                inputs:
                  artifactName: '$(Build.BuildId)-tfplan'
                  displayName: 'Download Plan Artifact'

              - task: ExtractFiles@1
                inputs:
                  archiveFilePatterns: '$(System.ArtifactsDirectory)/$(Build.BuildId)-tfplan/$(Build.BuildId).tgz'
                  destinationFolder: '$(System.DefaultWorkingDirectory)/'
                  cleanDestinationFolder: false
                  displayName: 'Extract Terraform Plan Artifact'

              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: ${{ variables.terraformVersion}}

              - task: TerraformTaskV1@0
                displayName: 'init'
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: ${{ variables.backendServiceArm}}
                  backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName}}
                  backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName}}
                  backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName}}
                  backendAzureRmKey: ${{ variables.backendAzureRmKey}}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

              - task: TerraformTaskV1@0
                displayName: 'plan'
                inputs:
                  provider: 'azurerm'
                  command: 'plan'
                  commandOptions: '-input=false -var-file=${{ parameters.enviornment }}'
                  environmentServiceNameAzureRM: ${{ variables.backendServiceArm}}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

              - task: TerraformTaskV1@0
                displayName: 'apply'
                inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  commandOptions: '-input=false -auto-approve -var-file=${{ parameters.enviornment }}'
                  environmentServiceNameAzureRM: ${{ variables.backendServiceArm}}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
